// Code generated by MockGen. DO NOT EDIT.
// Source: C:\projects\iq-progers\internal\service\interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/keremeti/iq-progers/internal/entity"
	service "github.com/keremeti/iq-progers/internal/service"
)

// MockITransactionsRepo is a mock of ITransactionsRepo interface.
type MockITransactionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionsRepoMockRecorder
}

// MockITransactionsRepoMockRecorder is the mock recorder for MockITransactionsRepo.
type MockITransactionsRepoMockRecorder struct {
	mock *MockITransactionsRepo
}

// NewMockITransactionsRepo creates a new mock instance.
func NewMockITransactionsRepo(ctrl *gomock.Controller) *MockITransactionsRepo {
	mock := &MockITransactionsRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionsRepo) EXPECT() *MockITransactionsRepoMockRecorder {
	return m.recorder
}

// GetByFilter mocks base method.
func (m *MockITransactionsRepo) GetByFilter(ctx context.Context, filt entity.Filter, limit, page int) (service.GenericTypePaginationTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", ctx, filt, limit, page)
	ret0, _ := ret[0].(service.GenericTypePaginationTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockITransactionsRepoMockRecorder) GetByFilter(ctx, filt, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockITransactionsRepo)(nil).GetByFilter), ctx, filt, limit, page)
}

// MockITransactionRepo is a mock of ITransactionRepo interface.
type MockITransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepoMockRecorder
}

// MockITransactionRepoMockRecorder is the mock recorder for MockITransactionRepo.
type MockITransactionRepoMockRecorder struct {
	mock *MockITransactionRepo
}

// NewMockITransactionRepo creates a new mock instance.
func NewMockITransactionRepo(ctrl *gomock.Controller) *MockITransactionRepo {
	mock := &MockITransactionRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepo) EXPECT() *MockITransactionRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockITransactionRepo) Insert(ctx context.Context, transaction entity.Transaction) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, transaction)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockITransactionRepoMockRecorder) Insert(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockITransactionRepo)(nil).Insert), ctx, transaction)
}

// Transfer mocks base method.
func (m *MockITransactionRepo) Transfer(ctx context.Context, s, r entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, s, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockITransactionRepoMockRecorder) Transfer(ctx, s, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockITransactionRepo)(nil).Transfer), ctx, s, r)
}

// MockIBalanceRepo is a mock of IBalanceRepo interface.
type MockIBalanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceRepoMockRecorder
}

// MockIBalanceRepoMockRecorder is the mock recorder for MockIBalanceRepo.
type MockIBalanceRepoMockRecorder struct {
	mock *MockIBalanceRepo
}

// NewMockIBalanceRepo creates a new mock instance.
func NewMockIBalanceRepo(ctrl *gomock.Controller) *MockIBalanceRepo {
	mock := &MockIBalanceRepo{ctrl: ctrl}
	mock.recorder = &MockIBalanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBalanceRepo) EXPECT() *MockIBalanceRepoMockRecorder {
	return m.recorder
}

// GetByUserId mocks base method.
func (m *MockIBalanceRepo) GetByUserId(ctx context.Context, userId int32) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIBalanceRepoMockRecorder) GetByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIBalanceRepo)(nil).GetByUserId), ctx, userId)
}
